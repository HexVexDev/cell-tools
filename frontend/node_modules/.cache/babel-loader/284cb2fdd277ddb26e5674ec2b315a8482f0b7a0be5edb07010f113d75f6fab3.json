{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HexVexDev\\\\Desktop\\\\DevProjects\\\\ImageProcessor\\\\Front\\\\front\\\\src\\\\components\\\\ImageCluster.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCluster = () => {\n  _s();\n  const [initialImage, setInitialImage] = useState([]);\n  const [segmentedImage, setSegmentedImage] = useState([]);\n  const [elbowGraph, setElbowGraph] = useState([]);\n  const [binaryMask, setBinaryMask] = useState([]);\n  const [ripleysK, setRipleysK] = useState([]);\n  const [accumulationIndex, setAccumulationIndex] = useState(0);\n  const [imageResults, setImageResults] = useState([]);\n  useEffect(() => {\n    console.log(1);\n    if (initialImage.length > 0) {\n      axios.post('http://localhost:8000/upload', initialImage).then(response => setImageResults(response.data));\n    }\n  }, [initialImage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/png,image/jpeg\",\n      onChange: e => setInitialImage(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), imageResults.length > 0 && imageResults.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: image.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCluster, \"ghpNVKci7dyGOK26jSMWdaJBzrg=\");\n_c = ImageCluster;\nexport default ImageCluster;\nvar _c;\n$RefreshReg$(_c, \"ImageCluster\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","ImageCluster","_s","initialImage","setInitialImage","segmentedImage","setSegmentedImage","elbowGraph","setElbowGraph","binaryMask","setBinaryMask","ripleysK","setRipleysK","accumulationIndex","setAccumulationIndex","imageResults","setImageResults","console","log","length","post","then","response","data","children","type","accept","onChange","e","target","files","fileName","_jsxFileName","lineNumber","columnNumber","map","image","title","src","_c","$RefreshReg$"],"sources":["C:/Users/HexVexDev/Desktop/DevProjects/ImageProcessor/Front/front/src/components/ImageCluster.js"],"sourcesContent":["import { useState,useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst ImageCluster =()=>{\r\n\r\n    const [initialImage,setInitialImage] = useState([]);\r\n    const [segmentedImage,setSegmentedImage] = useState([]);\r\n    const [elbowGraph, setElbowGraph] = useState([]);\r\n    const [binaryMask, setBinaryMask] = useState([]);\r\n    const [ripleysK, setRipleysK] = useState([]);\r\n    const [accumulationIndex, setAccumulationIndex] = useState(0);\r\n\r\n    const [imageResults,setImageResults] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        console.log(1)\r\n        if(initialImage.length>0){\r\n            axios.post('http://localhost:8000/upload', initialImage).then((response) => setImageResults(response.data))}\r\n    },[initialImage])\r\n\r\n    return(\r\n    <div>\r\n        <input type=\"file\" accept=\"image/png,image/jpeg\"  onChange={(e)=>setInitialImage(e.target.files[0])}/>\r\n        {imageResults.length > 0 &&\r\n        imageResults.map((image)=>\r\n            <div>\r\n                 <p>{image.title}</p>\r\n                 <img src={image.image}/>\r\n            </div>\r\n        )\r\n        }\r\n    </div>\r\n    )\r\n}\r\nexport default ImageCluster;"],"mappings":";;AAAA,SAASA,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAC1C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,MAAMC,YAAY,GAAEA,CAAA,KAAI;EAAAC,EAAA;EAEpB,MAAM,CAACC,YAAY,EAACC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACnD,MAAM,CAACS,cAAc,EAACC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACvD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAE7D,MAAM,CAACmB,YAAY,EAACC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAEnDC,SAAS,CAAC,MAAI;IACVoB,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IACd,IAAGf,YAAY,CAACgB,MAAM,GAAC,CAAC,EAAC;MACrBrB,KAAK,CAACsB,IAAI,CAAC,8BAA8B,EAAEjB,YAAY,CAAC,CAACkB,IAAI,CAAEC,QAAQ,IAAKN,eAAe,CAACM,QAAQ,CAACC,IAAI,CAAC,CAAC;IAAA;EACnH,CAAC,EAAC,CAACpB,YAAY,CAAC,CAAC;EAEjB,oBACAH,OAAA;IAAAwB,QAAA,gBACIxB,OAAA;MAAOyB,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,sBAAsB;MAAEC,QAAQ,EAAGC,CAAC,IAAGxB,eAAe,CAACwB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EACrGnB,YAAY,CAACI,MAAM,GAAG,CAAC,IACxBJ,YAAY,CAACoB,GAAG,CAAEC,KAAK,iBACnBpC,OAAA;MAAAwB,QAAA,gBACKxB,OAAA;QAAAwB,QAAA,EAAIY,KAAK,CAACC;MAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBlC,OAAA;QAAKsC,GAAG,EAAEF,KAAK,CAACA;MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEA,CAAC;AAEV,CAAC;AAAAhC,EAAA,CA9BKD,YAAY;AAAAsC,EAAA,GAAZtC,YAAY;AA+BlB,eAAeA,YAAY;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}